<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="K$,,kknR%P9i9Y!(d4]/" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="qDuejsp0@h~/e+T/`I#l"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace transitions {" line1="" line2="    export type TransitionProps = {" line3="        from: number;" line4="        to: number;" line5="        time: number;" line6="        easing: easing.EasingFunctions;" line7="        handler: (value: number, transition: Transition) =&gt; void;" line8="    }" line9="" line10="" line11="    let framesPerSecond = 50;" line12="" line13="    //% blockId=numberPicker" line14="    //% block=&quot;$value&quot;" line15="    //% blockHidden=true" line16="    //% value.fieldEditor=&quot;numberdropdown&quot;" line17="    //% value.fieldOptions.decompileLiterals=true" line18="    //% value.fieldOptions.values='1, 10, 25, 50, 100'" line19="    //% value.defl='50'" line20="    export function __numberPicker(value: number): number {" line21="        return value;" line22="    }" line23="" line24="    //% block=&quot;set frames per seconds to $value&quot;" line25="    //% value.shadow=&quot;numberPicker&quot;" line26="    export function setFps(value: number) {" line27="        framesPerSecond = Math.min(Math.max(value, 1), 100);" line28="    }" line29="" line30="    //% block=&quot;change $value from $from to $to over $time ms ($easing)&quot;" line31="    //% handlerStatement=1" line32="    //% expandableArgumentMode=&quot;enabled&quot;" line33="    //% draggableParameters=&quot;reporter&quot;" line34="    //% to.defl=1 " line35="    //% time.shadow=&quot;timePicker&quot;" line36="    //% time.min=0 time.defl=1000" line37="    //% easing.fieldEditor=&quot;gridpicker&quot;" line38="    //% easing.fieldOptions.columns=3" line39="    //% easing.defl=easing.EasingFunctions.EaseInOut" line40="    export function fromTo(from: number, to: number, time: number, easing: easing.EasingFunctions, handler: (value: number) =&gt; void) {" line41="        new Transition({" line42="            from, to, time, easing, handler" line43="        })" line44="    }" line45="" line46="    //% block=&quot;$easing from $from to $to in $time seconds $value $transition&quot;" line47="    //% advanced=true" line48="    //% handlerStatement=1" line49="    //% expandableArgumentMode=&quot;enabled&quot;" line50="    //% draggableParameters=&quot;reporter&quot;" line51="    //% to.defl=1 time.min=0 time.defl=1" line52="    //% easing.fieldEditor=&quot;gridpicker&quot;" line53="    //% easing.fieldOptions.width=220" line54="    //% easing.fieldOptions.columns=3" line55="    export function fromToWithRef(from: number, to: number, time: number, easing: easing.EasingFunctions, handler: (value: number, transition: Transition) =&gt; void) {" line56="        new Transition({" line57="            from, to, time, easing, handler" line58="        })" line59="    }" line60="" line61="    export class Transition {" line62="        _props: TransitionProps;" line63="        _frameDuration = 1000 / framesPerSecond;" line64="        _totalFrames = 0;" line65="        _currentFrame = 0;" line66="        _currentValue = 0;" line67="        _running = false;" line68="        _progress = 0;" line69="        _range = 0;" line70="        _easingFn: easing.EasingFunction = easing.linear;;" line71="" line72="        constructor(props: TransitionProps) {" line73="            this._props = props;" line74="            this._totalFrames = this._props.time / this._frameDuration;" line75="            this._range = this._props.to - this._props.from;" line76="            this._easingFn = easing.easingFunctionMap[this._props.easing] || this._easingFn;" line77="            this.play();" line78="        }" line79="" line80="        play() {" line81="            this._running = true;" line82="            this._currentValue = this._props.from;" line83="            this._progress = 0;" line84="            for (this._currentFrame = 0; this._currentFrame &lt;= this._totalFrames; this._currentFrame++) {" line85="                // Last frame should be the exact value provided" line86="                if (this._currentFrame === this._totalFrames)" line87="                    this._currentValue = this._props.to;" line88="                // Pause" line89="                basic.pause(this._frameDuration);" line90="                this._progress = this._currentFrame / this._totalFrames;" line91="                this._currentValue = this._easingFn(this._progress) * this._range + this._props.from;" line92="                // Callback function" line93="                this._props.handler(this._currentValue, this);" line94="                if (!this._running) break;" line95="            }" line96="        }" line97="" line98="        //% block=&quot;stop $this&quot;" line99="        //% advanced=true" line100="        //% this.defl=transition" line101="        //% this.shadow=variables_get" line102="        stop() {" line103="            this._running = false;" line104="        }" line105="" line106="        //% block=&quot;$this current frame&quot;" line107="        //% advanced=true" line108="        //% this.defl=transition" line109="        //% this.shadow=variables_get" line110="        get frame() {" line111="            return this._currentFrame;" line112="        }" line113="" line114="        //% block=&quot;$this total frames&quot;" line115="        //% advanced=true" line116="        //% this.defl=transition" line117="        //% this.shadow=variables_get" line118="        get total() {" line119="            return this._totalFrames;" line120="        }" line121="" line122="        //% block=&quot;$this current value&quot;" line123="        //% advanced=true" line124="        //% this.defl=transition" line125="        //% this.shadow=variables_get" line126="        get value() " line127="        {" line128="            return this._currentValue;" line129="        }" line130="    }" line131="" line132="    //% block=&quot;print $value to console&quot;" line133="    //% advanced=true" line134="    //% this.defl=value" line135="    //% this.shadow=variables_get" line136="    export function log(value: number) {" line137="        console.log(value);" line138="    }" line139="" line140="}" numlines="141"></mutation></block></statement></block></xml>